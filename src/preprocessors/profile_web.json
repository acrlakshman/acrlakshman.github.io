{"config":{"homepage":"https://lakshmananumolu.com","theme":{"value":"basic","render":true},"analytics":{"ga":{"trackingId":"UA-37418034-1","enable":true}},"meta":{"hideFooterCredit":true}},"basics":{"name":{"value":"Lakshman Anumolu","render":true},"label":{"value":"Senior Research Engineer","render":false},"image":{"value":"pic.png","render":true},"email":{"value":"anumolu@uwalumni.com","render":true},"phone":{"value":"206-486-2546","render":false},"url":{"value":"https://lakshmananumolu.com","render":false},"summary":{"label":"About me","value":"I am currently employed at [Convergent Science]. Before this I was in graduate school at [University of Wisconsin-Madison] where I earned a PhD. in [Mechanical Engineering](https://www.engr.wisc.edu/department/mechanical-engineering/) with a minor in [Computer Science](https://www.cs.wisc.edu/) under the supervision of [Prof. Mario F. Trujillo].\n\n**My interests:**\n* Physics based Modeling and Simulations\n* Scientific Computing\n* Computer Graphics\n* Develop web & desktop applications\n\n[University of Wisconsin-Madison]: https://wisc.edu\n[Prof. Mario F. Trujillo]: https://directory.engr.wisc.edu/me/Faculty/Trujillo_Mario/\n[Convergent Science]: https://convergecfd.com","render":true},"location":{"value":{"address":"Street","postalCode":"WI 53705","city":"Madison","countryName":"USA","region":"Wisconsin"},"render":false},"profiles":[{"value":{"network":"googlescholar","url":"https://scholar.google.com/citations?user=VcGv5cEAAAAJ&hl=en"},"render":true},{"value":{"network":"github","username":"acrlakshman"},"render":true},{"value":{"network":"linkedin","url":"https://www.linkedin.com/in/lakshmananumolu/"},"render":true},{"value":{"network":"twitter","username":"acrlakshman","url":"https://twitter.com/acrlakshman"},"render":true},{"value":{"network":"vimeo","url":"https://vimeo.com/user24179204"},"render":false}]},"work":{"label":"Experience","rank":1,"list":[{"value":{"name":"Convergent Science","location":"Madison, WI","description":"CFD company","position":"Senior Software Engineer","url":"https://convergecfd.com","startDate":"March, 2017","endDate":"Present","active":true,"highlights":["Implemented interface reconstruction algorithm for photo-realistic rendering","Implemented new data structures"]},"render":false},{"value":{"name":"University of Wisconsin-Madison","location":"Madison, WI","description":"University","position":"Research Assistant","url":"https://wisc.edu","startDate":"2011","endDate":"2017","highlights":["Built in-house CFD tool","Particle identification algorithm"]},"render":false}]},"education":{"label":"Education","rank":2,"list":[{"value":{"institution":"National Institute of Technology Durgapur","url":"https://nitdgp.ac.in","major":"Mechanical Engineering","minor":"","studyType":"B.Tech"},"render":false},{"value":{"institution":"University of Wisconsin-Madison","url":"https://wisc.edu","major":"Mechanical Engineering","minor":"Computer Science","studyType":"PhD","grade":3.9,"gradeTotal":4,"courses":["CS521 - Computer Graphics","ME801 - HPC"]},"render":false}]},"projects":{"label":"Projects","rank":4,"list":[{"value":{"name":"ProfileIO","description":"Delightfully simple website and resume generator for students and researchers","team":"_Lakshman Anumolu_","thumbnail":"profileio.png","highlights":["Website and resume generator via YAML"],"keywords":["resume","website","YAML","markdown"],"startDate":"2020","endDate":"present","url":"https://github.com/acrlakshman/profileio","roles":["Architect","Developer"],"type":"application","webPage":{"slug":"profileio","detail":""}},"render":false},{"value":{"name":"Framework to Photorealistic Render Computational Fluid Dynamics Results","description":"Scene templates to kick-start scalable rendering of CFD results photorealistically.","team":"_Lakshman Anumolu_","thumbnail":"scene_templates.png","highlights":["Scene templates to process CFD results photorealistically"],"keywords":["CFD","photorealistic","mitsuba"],"startDate":"2020","endDate":"present","url":"https://github.com/acrlakshman/scene_templates","roles":["Architect","Developer"],"type":"application","webPage":{"slug":"photorealistic-computational-fluid-dynamics","detail":""}},"render":true},{"value":{"name":"MeshIO","description":"A header only C++ library to read/write various surface mesh formats","team":"_with [Pradeep Garigipati](//pradeepgarigipati.com)_","thumbnail":"meshio_t.png","highlights":["Read and write STL file format"],"keywords":["STL","OBJ","TLGF","surface mesh"],"startDate":"2015","endDate":"present","url":"https://github.com/acrlakshman/MeshIO","roles":["Architect","Developer"],"type":"application"},"render":true},{"value":{"name":"Basic Model Viewer","description":"Qt based Visualization application written in Modern OpenGL","team":"_Lakshman Anumolu_","thumbnail":"bmv_t.gif","highlights":["Visualizes 3D surface mesh"],"keywords":["ModernGL","Qt"],"startDate":"2014","endDate":"present","url":"https://lakshmananumolu.com/project/basic-model-viewer","roles":["Architect"],"type":"application","webPage":{"slug":"basic-model-viewer","detail":"A [Qt5](http://qt-project.org/qt5) based visualization utility written in Modern OpenGL which currently supports basic geometric objects and .obj files for processing.\n\nSource code: @ [github repository](https://github.com/acrlakshman/BasicModelViewer)\n\n_Sample results_\n\n| | | |\n|-|-|-|\n|![teapot](bmv/teapot.gif)|![bunny](bmv/bunny.gif)|![cubehandle](bmv/cubehandle.gif)|\n\n---\n\n##### Goal of this project\n\n* Develop functionalities to generate post-processing files that assist in photo-realistic rendering (e.g. camera settings, lighting details, etc.).\n* Post-process data from simulation engines (e.g. [OpenFOAM](http://www.openfoam.com/)) and generate standard surface meshes for rendering. (There exists both opensource and commercial utilities that does this job, however they heavily concentrate on visualizing the scene with inhouse tools and still lack in providing compatibility with other packages.)\n* Visualize objects that are defined in standard formats like Wavefront OBJ, PLY etc.\n* Open source, easy to understand and also act as a learning platform for computer graphics.\n\n---\n\n##### Motivation\n\nWhile rendering results obtained from [OpenFOAM](http://www.openfoam.com/) using [POV-Ray](http://www.povray.org/), I observed the trouble that my friends faced in deciding the camera settings and material properties. Apart from this, the route that we have taken to generate POV-Ray compatible files, which is via [EnSight](https://www.ansys.com/products/fluids/ansys-ensight). Though Basic Model Viewer is not yet fully equipped to address all these issues, I have made some progress along with completing some useful functionalities which can come handy for photo-realistic rendering.\n\n---\n\n##### Basic usage\n\nThe following demo is aimed to kick-start a user in using this application in their work with some basic tools.\n\n_Installation_\n\n```sh\ngit clone https://github.com/acrlakshman/BasicModelViewer.git BasicModelViewer\ncd BasicModelViewer\nmkdir build\ncd build\nqmake ..\nmake\n```\n\n_Demo_\n\nCurrently GUI for _Basic Model Viewer_ is not complete, hence for the time being `RenderScene.cpp` & `RenderScene.h` are provided to render a scene. This essentially forces user to write code for what he is looking to visualize.\n\n* Initialize the RenderObj object as follows in the function `InitializeScene`\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  ```\n\n  Assuming the object of RenderObj is called in the Draw function, the following scene is being rendered in the graphics window (zoom towards the object by scrolling mouse wheel)\n\n  ![cubehandle](bmv/cubehandle_1.png)\n  _Thanks to [Pradeep Garigipati] for providing OBJ file of this object_\n\n* To get the camera details, _`press c on the keyboard`_, this saves the details in a file `scene_details.txt` in the parent directory. Sample output is as follows\n\n  ```sh\n  Camera details (Right handed system)\n  Camera position: (36.402737, 41.488392, 30.879433)\n  Camera look at: (0.000000, 0.000000, 0.000000)\n  Camera up vector: (-0.493296, 0.754725, -0.432489)\n  Camera field of view: 23.000000\n\n  Camera details (Left handed system)\n  Camera position: (36.402737, 41.488392, -30.879433)\n  Camera look at: (0.000000, 0.000000, 0.000000)\n  Camera up vector: (-0.493296, 0.754725, 0.432489)\n  Camera field of view: 23.000000\n\n  Light details (Right handed system)\n  Light position: (0.000000, 0.000000, 10.000000)\n\n  Light details (Left handed system)\n  Light position: (0.000000, 0.000000, -10.000000)\n  ```\n\n* To show the surface mesh of the object (wireframe), update the `InitializeScene` function as follows\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->render_obj.show_wire_frame(true);\n  ```\n\n  ![cubehandle](bmv/cubehandle_2.png)\n  _wireframe mode_\n\n* Let us show the normals on the surface mesh of the object, by updating the `InitializeScene` function as follows\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->render_obj.show_wire_frame(true);\n  this->render_obj.show_normals(true);\n  ```\n\n  ![cubehandle](bmv/cubehandle_3.png)\n  _Object in wireframe mode with normals_\n\n  > Note: Normals do not scale properly with the object dimensions. Hence for now, in case of the objects with small dimensional values, user needs to manually edit the size of normals (e.g. Change the value of `normal_scalar` in `GenericObject.cpp`)\n\n* The following modification shows two objects with different light settings\n\n  In `InitializeScene` function:\n\n  ```cpp\n  if (!this->cubehandle_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->cubehandle_obj.show_wire_frame(false);\n  this->cubehandle_obj.show_normals(false);\n\n  if (!this->teapot_obj.LocalInitialize(\"../Resources/teapot.obj\"))\n    return false;\n\n  Light light_for_teapot;\n  light_for_teapot.position = QVector3D(0.0, 0.0, 10.0);\n  light_for_teapot.color_ambient = QVector3D(0.75, 0.6, 0.5);\n  light_for_teapot.color_diffuse = QVector3D(0.75, 0.6, 0.5);\n  light_for_teapot.color_specular = QVector3D(1.0, 1.0, 1.0);\n\n  this->teapot_obj.EditLight(light_for_teapot);\n\n  this->teapot_obj.show_wire_frame(false);\n  this->teapot_obj.show_normals(false);\n  ```\n\n  In `Draw` function\n\n  ```cpp\n  if (!this->cubehandle_obj.Draw(projection, modelview_cam, modelview, shader_))\n    return false;\n\n  modelview.translate(QVector3D(5.0, 5.0,-2.0));\n  if (!this->teapot_obj.Draw(projection, modelview_cam, modelview, shader_))\n    return false;\n  ```\n\n  In `TakeDown` function\n\n  ```cpp\n  this->cubehandle_obj.TakeDown();\n  this->teapot_obj.TakeDown();\n  ```\n\n  ![cubehandle](bmv/cubehandle_teapot.png)\n\n* Some default shaders are available in the folder `Shaders`.\n* Texture mapping is under development.\n\n---\n\n##### Acknowledgements\n\n* [Hammad Mazhar] both for helping me to understand the basics of computer graphics and for providing his camera class, the basic functionalities of which are used in this project.\n* [Syoyo Fujita] for his obj file loader, which I got through Hammad.\n* [Pradeep Garigipati] for providing sample obj files.\n* [Andrew Seidl]\n\n[Pradeep Garigipati]: https://pradeepgarigipati.com/\n[Hammad Mazhar]: https://github.com/hmazhar\n[Syoyo Fujita]: https://github.com/syoyo\n[Andrew Seidl]: https://github.com/andrewseidl"}},"render":true},{"value":{"name":"Weak Formulation of Gradient Augmented Level Set Method to Stephan Type Problems","description":"This was my final project for [Prof. Eftychios Sifakis's](http://pages.cs.wisc.edu/~sifakis) course [CS838](http://pages.cs.wisc.edu/~sifakis/courses/cs838-f12/) (_Advanced Modelling and Simulation_) (Fall-2012).  \n *Video along with the related files are included*","team":"_Lakshman Anumolu_","thumbnail":"crystal_growth_t.png","highlights":["3D Crystal growth simulated using PhysBAM"],"keywords":["PhysBAM"],"startDate":"2012","endDate":"2012","url":"https://lakshmananumolu.com/project/crystal-growth","webPage":{"slug":"crystal-growth","detail":"My project for the course [CS838](http://pages.cs.wisc.edu/~sifakis/courses/cs838-f12/) (_Advanced Modeling and Simulation_) taught by [Prof. Eftychios Sifakis] in the Fall of 2012. Currently, here are some of the implementations in the source code\n\n* 3D implementation of Gradient augmented level set method ([arXiv version](https://arxiv.org/abs/0905.3409)) with tri-cubic Hermite interpolating polynomials.\n* Semi-Lagrangian implementation of pde’s for constant and linear extrapolations of scalar field across interface, originally proposed in \"_A partial differential equation approach to multidimensional extrapolation_, J. Comput. Phys. 193 (2004) 349-355\".\n* Implemented in the framework of [PhysBAM].\n* Results can be rendered using [Mitsuba].\n\nSource code: [12/2012, @[github](https://github.com/acrlakshman/crystal_growth_level_set_method)]; [Report](crystal-growth/report.pdf \"file\")\n\n---\n\n##### Some rendered results (using Mitsuba)\n\n| | |\n|-|-|\n|![crystal growth initial](crystal-growth/crystal_growth_initial.png)|![crystal growth final](crystal_growth_t.png)|\n\n---\n\n[crystal-growth-video](https://youtu.be/KuVfyDwx2qo \"show_video\")\n\n*[Crystal growth simulation](https://youtu.be/KuVfyDwx2qo) from [Lakshman Anumolu](https://www.youtube.com/channel/UC-kESKbz8Vw4RgoQiEh_LLg) on YouTube*\n\nScenes are rendered using [Mitsuba] v0.4.5. Scene file along with the scene background can be obtained from [here](crystal-growth/renderscene.zip \"file\"). Please note the following regarding the files in the downloaded zip file.\n* `scene.xml`: scene file that takes obj file as an input argument.\n* `movie.sh`: script that renders multiple scenes and converts exr images to png files and finally makes a movie using ffmpeg.\n* I believe these files will be helpful for a beginner in understanding how to use Mitsuba in their projects. They are pretty much self-explanatory.\n\nNote: `mtsutil` that comes with mitsuba can also be used instead of some of the above scripts (e.g. to get png files).\n\n[Prof. Eftychios Sifakis]: http://pages.cs.wisc.edu/~sifakis/\n[PhysBAM]: http://physbam.stanford.edu/\n[Mitsuba]: http://www.mitsuba-renderer.org/"}},"render":true},{"value":{"name":"Simulation of Smoke in OpenFOAM Framework","description":"My project for [Prof. Mario F. Trujillo's](http://www.engr.wisc.edu/me/faculty/trujillo_mario.html) course ME964 (_Two-Phase Flows Fundamentals_) (Fall-2012), completed in collaboration with [Imaduddin Ahmed](https://multiphaseflow.erc.wisc.edu/)","team":"_with [Imaduddin Ahmed](https://multiphaseflow.erc.wisc.edu/people/)_","thumbnail":"taup_0_frame20.png","highlights":["Smoke simulation using OpenFOAM"],"keywords":["OpenFOAM"],"startDate":"2012","endDate":"2012","url":"https://lakshmananumolu.com/project/smoke-simulation-openfoam","webPage":{"slug":"smoke-simulation-openfoam","detail":"My project for the course ME964 (_Two-Phase Flows Fundamentals_) taught by [Prof. Mario F. Trujillo] in the Fall of 2012. This was done in collaboration with [Imaduddin Ahmed]. Key features that the source code can handle are listed here\n\n* Cell centered and face centered formulation of solving the modelled momentum equation detailed in [Fedkiw et al.](http://graphics.ucsd.edu/~henrik/papers/smoke/) is implemented in finite volume formulation of OpenFOAM. But this implemented formulation resulted in unknown instability issues.\n* Dusty gas and equilibrium approximations are used to advect smoke.\n* Implemented in the framework of [OpenFOAM](http://www.openfoam.com/).\n* Results can be rendered using [Mitsuba].\n\nSource code: [[12/2012](smoke-simulation/ME964_ProjectCode.zip \"file\")]; [[Report](smoke-simulation/ME964_ProjectReport.pdf \"file\")]\n\n---\n\n##### Some rendered results (using Mitsuba)\n\n| | | |\n|-|-|-|\n|![Frame-3](smoke-simulation/taup_0_frame3.png)|![Frame-20](smoke-simulation/taup_0_frame20.png)|![Frame-37](smoke-simulation/taup_0_frame37.png)|\n\nIf you are interested in knowing how to render multiple images with Mitsuba renderer and make a movie with them, please refer to my [CS838 project](project/crystal-growth).\n\n[Prof. Mario F. Trujillo]: http://www.engr.wisc.edu/me/faculty/trujillo_mario.html\n[Imaduddin Ahmed]: https://multiphaseflow.erc.wisc.edu/\n[Mitsuba]: http://www.mitsuba-renderer.org/"}},"render":true},{"value":{"name":"Screensaver using ModernGL","description":"My final project for [Perry Kivolowitz's](https://www.carthage.edu/live/profiles/1477-perry-kivolowitz) course CS559 (_Computer Graphics_) at [UW-Madison](https://wisc.edu) (Fall-2013).  \n _Video and executables (along with required dlls) are included._","team":"_Lakshman Anumolu_","thumbnail":"screensaver_t.png","highlights":["Screensaver in ModernGL"],"keywords":["ModernGL"],"startDate":"2013","endDate":"2013","url":"https://lakshmananumolu.com/project/cs559-f13","webPage":{"slug":"cs559-f13","detail":"My project for the course CS559 ‘Computer Graphics‘ taught by Perry Kivolowitz in the Fall of 2013. Unlike other projects, source code for this one is not provided, since my code is not properly organized. However for interested students I would encourage to visit one of my friends [Hammad Mazhar] github repository, where he may be uploading his project files for the same course. As of now, he has uploaded “camera” class which is also used by me in this project.\n\nBelow is the screencast of my project and the windows executable along with shaders and readme file can be found [here](cs559/project.zip \"file\").\n\n[](https://youtu.be/IMJ_PIey3Ik \"show_video\")\n\nNote: This project was completed in a hurry, hence is not at all organized. I will try to upload properly written shaders as well as separate class files for shaders, frame buffer objects, mouse, camera, etc.\n\n*Edit: Please visit [Basic Model Viewer] page for properly organized class files and for other updates.*\n\n[Basic Model Viewer]: project/basic-model-viewer\n[Hammad Mazhar]: https://github.com/hmazhar"}},"render":true},{"value":{"name":"Desktop, web apps, games built while learning app development","description":"Apps written during hackathons or free time","team":"_Lakshman Anumolu_","thumbnail":"apps_t.jpg","highlights":["Facebook friend sentiment analysis","Facebook speech-to-text enabled chat","Air hockey"],"startDate":"2013","endDate":"2014","url":"https://lakshmananumolu.com/project/basic-model-viewer","roles":["Architect"],"type":"application","webPage":{"slug":"initial-apps","detail":"### Facebook friends sentiment\n\nFacebook app written during HackMadison2014 event at UW-Madison. Analyses emotions between friends by collecting their interactions through messages, comments, etc.\n\n*Before going to the website, please go through the instructions below of how to use it or `readme` file on [github](https://github.com/acrlakshman/facebook-sentiment-analysis)*\n\n[website](https://friendsenti.herokuapp.com/) ( ← hosted on heroku, make sure to turn off ghostery)\n\n* Select a friend from the dropdown box and wait for the dial to become steady.\n* Result is on the scale of 0 to 1, 0 for most negative emotion, 1 for the best.\n* Model used here to unify emotions assigned to each word from [SentiWordNet3.0](http://sentiwordnet.isti.cnr.it/) is not affective or more wrong, which will be updated in future. For now consider this app as a fun project instead of taking results seriously.\n\nCode: [@[github](https://github.com/acrlakshman/facebook-sentiment-analysis)]\n\n-------------------------------\n\n### Facebook chat with voice\n\nA facebook app written during Midwest Regional Hackathon 2013 at UIUC organized by facebook, using which you can chat as you speak. It can post on your wall whatever you tell it to post.\n\n*Before going to the website, please go through the instructions below of how to use it or `readme` file on [github](https://github.com/acrlakshman/facebook-speech2text-chat). Website has no useful help to guide you through…*\n\n* Trigger word: `lucky` (you can change it in the source code)\n* Whenever you want it to do, start that sentence with `lucky`. For instance, if you want it to connect to chat server, just say *`lucky connect me to chat`* or something similar… Then select any of your online friend and keep speaking, it will chat for you.\n* *`lucky post on my wall`* or something similar… will enable you to type something that you want it to post on your wall… when you are done typing just say *`lucky done`* or *`lucky post`*, it will post for you on your facebook wall.\n* To customize trigger word (`lucky`), edit line 780 in [index.php](https://github.com/acrlakshman/facebook-speech2text-chat/blob/master/index.php#L780). Also customize dialect in line 1387 which is set to recognize American english right now.\n\nCode: [@[github](https://github.com/acrlakshman/facebook-speech2text-chat)]\n\n-------------------------------\n\n### Air Hockey (2-player game)\n\nA dual player game written in Java using the shapes library provided at the hackathon event conducted by [The Hub](https://thehubclub.wordpress.com/) at [UW-Madison](https://wisc.edu). This was written in collaboration with two other UW-Madison Computer Science students (we did not get introduced properly, so I don’t know their names, pretty much we all had equal contribution to this game).\n\n* 2D game for 2 players who can simultaneously play with a single keyboard.\n* With each winning score to either player, speed of puck increases.\n\nKeyboard controls:\n\n* Player-1: W (Up), A (Left), D (Right), S (Down), Q-E-Z-C (Along diagonal directions).\n* Player-2: I (Up), J (Left), L (Right), K (Down), U-O-N-<dot> (Along diagonal directions).\n\nCode: [@ [github](https://github.com/acrlakshman/Air-Hockey-in-Java) repository]\n\nSnapshots:\n\n| | |\n|-|-|\n|![Starting shot](initial-apps/air-hockey-1.png)|![After player-2 scored a point](initial-apps/air-hockey-2.png)|"}},"render":true}]},"awards":{"label":"Awards & Achievements","rank":11,"list":[{"value":{"title":"Marshal award","date":"May 2014","awarder":"ILASS","summary":"Best paper for numerical work"},"render":false}]},"publications":{"label":"Publications","rank":3,"list":[{"value":{"type":"article","author":"**Lakshman Anumolu**, Mario F. Trujillo","title":"Gradient augmented level set method for phase change simulations","journal":"Journal of Computational Physics","volume":353,"year":2018,"number":0,"pages":"377-406","thumbnail":"gals_phase_change.png","url":"https://www.sciencedirect.com/science/article/pii/S0021999117307696"},"render":true},{"value":{"type":"book","author":"Mario F. Trujillo, **Lakshman Anumolu**, Douglas Ryddner","title":"Direct Numerical Simulations for Two-Phase Flows with Phase Change","series":"Encyclopedia of Two-Phase Heat Transfer and Flow","volume":3,"publisher":"World Scientific","address":"","year":2018,"thumbnail":"dns_phasechange.png","url":"https://www.worldscientific.com/doi/abs/10.1142/9789813229440_0008"},"render":true},{"value":{"type":"article","author":"Mario F. Trujillo, **Lakshman Anumolu**, Douglas Ryddner","title":"The distortion of the level set gradient under advection","journal":"Journal of Computational Physics","volume":334,"year":2017,"number":0,"pages":"81-101","thumbnail":"levelset_deformation.png","url":"https://www.sciencedirect.com/science/article/pii/S0021999116307045"},"render":true},{"value":{"type":"article","author":"Steven R. Lewis, **Lakshman Anumolu**, Mario F. Trujillo","title":"Numerical Simulation of Droplet Train and Free Surface Jet Impingement","journal":"International Journal of Heat and Fluid Flow","volume":44,"year":2013,"number":0,"pages":"610-623","thumbnail":"jet_paper.jpg","url":"https://www.sciencedirect.com/science/article/pii/S0142727X13001707"},"render":true},{"value":{"type":"article","author":"**Lakshman Anumolu**, Mario F. Trujillo","title":"Gradient Augmented Reinitialization Scheme for the Level Set Method","journal":"International Journal of Numerical Methods in Fluids","volume":73,"year":2013,"number":12,"pages":"1011-1041","thumbnail":"gals_reinit.jpg","url":"http://onlinelibrary.wiley.com/doi/10.1002/fld.3834/abstract"},"render":true},{"value":{"type":"article","author":"Suraj S. Deshpande, **Lakshman Anumolu**, Mario F. Trujillo","title":"Evaluating the performance of the two-phase flow solver interFoam","journal":"Computational Science & Discovery","volume":5,"year":2012,"number":0,"pages":"014016: 1-36","thumbnail":"interfoam_thumbnail.png","url":"http://iopscience.iop.org/1749-4699/5/1/014016"},"render":true},{"value":{"type":"thesis","category":"masters","author":"**Lakshman Anumolu**","title":"Local, Higher Order Accurate, Level Set Redistancing Methods","publisher":"University of Wisconsin-Madison","address":"Madison WI","year":2011,"thumbnail":"ms_thesis_thumbnail.png"},"render":true}]},"gallery":{"label":"Gallery","rank":5,"list":[{"value":{"type":"image","src":"pic.png","caption":{"title":"Basic Model Viewer","description":"A project"}},"render":false},{"value":{"type":"video","platform":"youtube","videoId":"Wsije1KetVw"},"render":false},{"value":{"type":"video","platform":"youtube","videoId":"Wsije1KetVw"},"render":false},{"value":{"type":"video","platform":"youtube","videoId":"Wsije1KetVw"},"render":false},{"value":{"type":"video","platform":"vimeo","videoId":"459803240"},"render":false}]},"skills":{"label":"Skills","rank":6,"list":[{"value":{"name":"Web development","level":"Master","keywords":["HTML","CSS","Javascript"]},"render":false}]},"languages":{"label":"Languages","rank":7,"list":[{"value":{"language":"English","fluency":"Native speaker"},"render":false}]},"interests":{"label":"Interests","rank":8,"list":[{"value":{"name":"Wildlife","keywords":["Ferrets","Unicorns"]},"render":false}]},"references":{"label":"References","rank":9,"list":[{"value":{"name":"David","title":"Professor","affiliation":"University","address":"1111 University Ave","postalCode":"WI 53705","city":"Madison","countryName":"USA","region":"Wisconsin","phoneNumber":"1111111111","email":"email@email.com"},"render":false}]},"custom":[{"label":"Custom","rank":1,"value":"My project for the course [CS838](http://pages.cs.wisc.edu/~sifakis/courses/cs838-f12/) (_Advanced Modeling and Simulation_) taught by [Prof. Eftychios Sifakis] in the Fall of 2012. Currently, here are some of the implementations in the source code\n\n* 3D implementation of Gradient augmented level set method ([arXiv version](https://arxiv.org/abs/0905.3409)) with tri-cubic Hermite interpolating polynomials.\n* Semi-Lagrangian implementation of pde’s for constant and linear extrapolations of scalar field across interface, originally proposed in \"_A partial differential equation approach to multidimensional extrapolation_, J. Comput. Phys. 193 (2004) 349-355\".\n* Implemented in the framework of [PhysBAM].\n* Results can be rendered using [Mitsuba].\n\nSource code: [12/2012, @[github](https://github.com/acrlakshman/crystal_growth_level_set_method)]; [Report](crystal-growth/report.pdf \"file\")\n\n---\n\n##### Some rendered results (using Mitsuba)\n\n| | |\n|-|-|\n|![crystal growth initial](crystal-growth/crystal_growth_initial.png)|![crystal growth final](crystal_growth_t.png)|\n\n---\n\n[crystal-growth-video](https://youtu.be/KuVfyDwx2qo \"show_video\")\n\n*[Crystal growth simulation](https://youtu.be/KuVfyDwx2qo) from [Lakshman Anumolu](https://www.youtube.com/channel/UC-kESKbz8Vw4RgoQiEh_LLg) on YouTube*\n\nScenes are rendered using [Mitsuba] v0.4.5. Scene file along with the scene background can be obtained from [here](crystal-growth/renderscene.zip \"file\"). Please note the following regarding the files in the downloaded zip file.\n* `scene.xml`: scene file that takes obj file as an input argument.\n* `movie.sh`: script that renders multiple scenes and converts exr images to png files and finally makes a movie using ffmpeg.\n* I believe these files will be helpful for a beginner in understanding how to use Mitsuba in their projects. They are pretty much self-explanatory.\n\nNote: `mtsutil` that comes with mitsuba can also be used instead of some of the above scripts (e.g. to get png files).\n\n[Prof. Eftychios Sifakis]: http://pages.cs.wisc.edu/~sifakis/\n[PhysBAM]: http://physbam.stanford.edu/\n[Mitsuba]: http://www.mitsuba-renderer.org/","render":false},{"label":"Custom2","rank":2,"value":"A [Qt5](http://qt-project.org/qt5) based visualization utility written in Modern OpenGL which currently supports basic geometric objects and .obj files for processing.\n\nSource code: @ [github repository](https://github.com/acrlakshman/BasicModelViewer)\n\n_Sample results_\n\n| | | |\n|-|-|-|\n|![teapot](bmv/teapot.gif)|![bunny](bmv/bunny.gif)|![cubehandle](bmv/cubehandle.gif)|\n\n---\n\n##### Goal of this project\n\n* Develop functionalities to generate post-processing files that assist in photo-realistic rendering (e.g. camera settings, lighting details, etc.).\n* Post-process data from simulation engines (e.g. [OpenFOAM](http://www.openfoam.com/)) and generate standard surface meshes for rendering. (There exists both opensource and commercial utilities that does this job, however they heavily concentrate on visualizing the scene with inhouse tools and still lack in providing compatibility with other packages.)\n* Visualize objects that are defined in standard formats like Wavefront OBJ, PLY etc.\n* Open source, easy to understand and also act as a learning platform for computer graphics.\n\n---\n\n##### Motivation\n\nWhile rendering results obtained from [OpenFOAM](http://www.openfoam.com/) using [POV-Ray](http://www.povray.org/), I observed the trouble that my friends faced in deciding the camera settings and material properties. Apart from this, the route that we have taken to generate POV-Ray compatible files, which is via [EnSight](https://www.ansys.com/products/fluids/ansys-ensight). Though Basic Model Viewer is not yet fully equipped to address all these issues, I have made some progress along with completing some useful functionalities which can come handy for photo-realistic rendering.\n\n---\n\n##### Basic usage\n\nThe following demo is aimed to kick-start a user in using this application in their work with some basic tools.\n\n_Installation_\n\n```sh\ngit clone https://github.com/acrlakshman/BasicModelViewer.git BasicModelViewer\ncd BasicModelViewer\nmkdir build\ncd build\nqmake ..\nmake\n```\n\n_Demo_\n\nCurrently GUI for _Basic Model Viewer_ is not complete, hence for the time being `RenderScene.cpp` & `RenderScene.h` are provided to render a scene. This essentially forces user to write code for what he is looking to visualize.\n\n* Initialize the RenderObj object as follows in the function `InitializeScene`\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  ```\n\n  Assuming the object of RenderObj is called in the Draw function, the following scene is being rendered in the graphics window (zoom towards the object by scrolling mouse wheel)\n\n  ![cubehandle](bmv/cubehandle_1.png)\n  _Thanks to [Pradeep Garigipati] for providing OBJ file of this object_\n\n* To get the camera details, _`press c on the keyboard`_, this saves the details in a file `scene_details.txt` in the parent directory. Sample output is as follows\n\n  ```sh\n  Camera details (Right handed system)\n  Camera position: (36.402737, 41.488392, 30.879433)\n  Camera look at: (0.000000, 0.000000, 0.000000)\n  Camera up vector: (-0.493296, 0.754725, -0.432489)\n  Camera field of view: 23.000000\n\n  Camera details (Left handed system)\n  Camera position: (36.402737, 41.488392, -30.879433)\n  Camera look at: (0.000000, 0.000000, 0.000000)\n  Camera up vector: (-0.493296, 0.754725, 0.432489)\n  Camera field of view: 23.000000\n\n  Light details (Right handed system)\n  Light position: (0.000000, 0.000000, 10.000000)\n\n  Light details (Left handed system)\n  Light position: (0.000000, 0.000000, -10.000000)\n  ```\n\n* To show the surface mesh of the object (wireframe), update the `InitializeScene` function as follows\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->render_obj.show_wire_frame(true);\n  ```\n\n  ![cubehandle](bmv/cubehandle_2.png)\n  _wireframe mode_\n\n* Let us show the normals on the surface mesh of the object, by updating the `InitializeScene` function as follows\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->render_obj.show_wire_frame(true);\n  this->render_obj.show_normals(true);\n  ```\n\n  ![cubehandle](bmv/cubehandle_3.png)\n  _Object in wireframe mode with normals_\n\n  > Note: Normals do not scale properly with the object dimensions. Hence for now, in case of the objects with small dimensional values, user needs to manually edit the size of normals (e.g. Change the value of `normal_scalar` in `GenericObject.cpp`)\n\n* The following modification shows two objects with different light settings\n\n  In `InitializeScene` function:\n\n  ```cpp\n  if (!this->cubehandle_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->cubehandle_obj.show_wire_frame(false);\n  this->cubehandle_obj.show_normals(false);\n\n  if (!this->teapot_obj.LocalInitialize(\"../Resources/teapot.obj\"))\n    return false;\n\n  Light light_for_teapot;\n  light_for_teapot.position = QVector3D(0.0, 0.0, 10.0);\n  light_for_teapot.color_ambient = QVector3D(0.75, 0.6, 0.5);\n  light_for_teapot.color_diffuse = QVector3D(0.75, 0.6, 0.5);\n  light_for_teapot.color_specular = QVector3D(1.0, 1.0, 1.0);\n\n  this->teapot_obj.EditLight(light_for_teapot);\n\n  this->teapot_obj.show_wire_frame(false);\n  this->teapot_obj.show_normals(false);\n  ```\n\n  In `Draw` function\n\n  ```cpp\n  if (!this->cubehandle_obj.Draw(projection, modelview_cam, modelview, shader_))\n    return false;\n\n  modelview.translate(QVector3D(5.0, 5.0,-2.0));\n  if (!this->teapot_obj.Draw(projection, modelview_cam, modelview, shader_))\n    return false;\n  ```\n\n  In `TakeDown` function\n\n  ```cpp\n  this->cubehandle_obj.TakeDown();\n  this->teapot_obj.TakeDown();\n  ```\n\n  ![cubehandle](bmv/cubehandle_teapot.png)\n\n* Some default shaders are available in the folder `Shaders`.\n* Texture mapping is under development.\n\n---\n\n##### Acknowledgements\n\n* [Hammad Mazhar] both for helping me to understand the basics of computer graphics and for providing his camera class, the basic functionalities of which are used in this project.\n* [Syoyo Fujita] for his obj file loader, which I got through Hammad.\n* [Pradeep Garigipati] for providing sample obj files.\n* [Andrew Seidl]\n\n[Pradeep Garigipati]: https://pradeepgarigipati.com/\n[Hammad Mazhar]: https://github.com/hmazhar\n[Syoyo Fujita]: https://github.com/syoyo\n[Andrew Seidl]: https://github.com/andrewseidl","render":false},{"label":"Custom page 1","webPage":{"slug":"custom/custom-page-1","detail":"A [Qt5](http://qt-project.org/qt5) based visualization utility written in Modern OpenGL which currently supports basic geometric objects and .obj files for processing.\n\nSource code: @ [github repository](https://github.com/acrlakshman/BasicModelViewer)\n\n_Sample results_\n\n| | | |\n|-|-|-|\n|![teapot](bmv/teapot.gif)|![bunny](bmv/bunny.gif)|![cubehandle](bmv/cubehandle.gif)|\n\n---\n\n##### Goal of this project\n\n* Develop functionalities to generate post-processing files that assist in photo-realistic rendering (e.g. camera settings, lighting details, etc.).\n* Post-process data from simulation engines (e.g. [OpenFOAM](http://www.openfoam.com/)) and generate standard surface meshes for rendering. (There exists both opensource and commercial utilities that does this job, however they heavily concentrate on visualizing the scene with inhouse tools and still lack in providing compatibility with other packages.)\n* Visualize objects that are defined in standard formats like Wavefront OBJ, PLY etc.\n* Open source, easy to understand and also act as a learning platform for computer graphics.\n\n---\n\n##### Motivation\n\nWhile rendering results obtained from [OpenFOAM](http://www.openfoam.com/) using [POV-Ray](http://www.povray.org/), I observed the trouble that my friends faced in deciding the camera settings and material properties. Apart from this, the route that we have taken to generate POV-Ray compatible files, which is via [EnSight](https://www.ansys.com/products/fluids/ansys-ensight). Though Basic Model Viewer is not yet fully equipped to address all these issues, I have made some progress along with completing some useful functionalities which can come handy for photo-realistic rendering.\n\n---\n\n##### Basic usage\n\nThe following demo is aimed to kick-start a user in using this application in their work with some basic tools.\n\n_Installation_\n\n```sh\ngit clone https://github.com/acrlakshman/BasicModelViewer.git BasicModelViewer\ncd BasicModelViewer\nmkdir build\ncd build\nqmake ..\nmake\n```\n\n_Demo_\n\nCurrently GUI for _Basic Model Viewer_ is not complete, hence for the time being `RenderScene.cpp` & `RenderScene.h` are provided to render a scene. This essentially forces user to write code for what he is looking to visualize.\n\n* Initialize the RenderObj object as follows in the function `InitializeScene`\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  ```\n\n  Assuming the object of RenderObj is called in the Draw function, the following scene is being rendered in the graphics window (zoom towards the object by scrolling mouse wheel)\n\n  ![cubehandle](bmv/cubehandle_1.png)\n  _Thanks to [Pradeep Garigipati] for providing OBJ file of this object_\n\n* To get the camera details, _`press c on the keyboard`_, this saves the details in a file `scene_details.txt` in the parent directory. Sample output is as follows\n\n  ```sh\n  Camera details (Right handed system)\n  Camera position: (36.402737, 41.488392, 30.879433)\n  Camera look at: (0.000000, 0.000000, 0.000000)\n  Camera up vector: (-0.493296, 0.754725, -0.432489)\n  Camera field of view: 23.000000\n\n  Camera details (Left handed system)\n  Camera position: (36.402737, 41.488392, -30.879433)\n  Camera look at: (0.000000, 0.000000, 0.000000)\n  Camera up vector: (-0.493296, 0.754725, 0.432489)\n  Camera field of view: 23.000000\n\n  Light details (Right handed system)\n  Light position: (0.000000, 0.000000, 10.000000)\n\n  Light details (Left handed system)\n  Light position: (0.000000, 0.000000, -10.000000)\n  ```\n\n* To show the surface mesh of the object (wireframe), update the `InitializeScene` function as follows\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->render_obj.show_wire_frame(true);\n  ```\n\n  ![cubehandle](bmv/cubehandle_2.png)\n  _wireframe mode_\n\n* Let us show the normals on the surface mesh of the object, by updating the `InitializeScene` function as follows\n\n  ```cpp\n  if (!this->render_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->render_obj.show_wire_frame(true);\n  this->render_obj.show_normals(true);\n  ```\n\n  ![cubehandle](bmv/cubehandle_3.png)\n  _Object in wireframe mode with normals_\n\n  > Note: Normals do not scale properly with the object dimensions. Hence for now, in case of the objects with small dimensional values, user needs to manually edit the size of normals (e.g. Change the value of `normal_scalar` in `GenericObject.cpp`)\n\n* The following modification shows two objects with different light settings\n\n  In `InitializeScene` function:\n\n  ```cpp\n  if (!this->cubehandle_obj.LocalInitialize(\"../Resources/cubehandle0fix.obj\"))\n    return false;\n  this->cubehandle_obj.show_wire_frame(false);\n  this->cubehandle_obj.show_normals(false);\n\n  if (!this->teapot_obj.LocalInitialize(\"../Resources/teapot.obj\"))\n    return false;\n\n  Light light_for_teapot;\n  light_for_teapot.position = QVector3D(0.0, 0.0, 10.0);\n  light_for_teapot.color_ambient = QVector3D(0.75, 0.6, 0.5);\n  light_for_teapot.color_diffuse = QVector3D(0.75, 0.6, 0.5);\n  light_for_teapot.color_specular = QVector3D(1.0, 1.0, 1.0);\n\n  this->teapot_obj.EditLight(light_for_teapot);\n\n  this->teapot_obj.show_wire_frame(false);\n  this->teapot_obj.show_normals(false);\n  ```\n\n  In `Draw` function\n\n  ```cpp\n  if (!this->cubehandle_obj.Draw(projection, modelview_cam, modelview, shader_))\n    return false;\n\n  modelview.translate(QVector3D(5.0, 5.0,-2.0));\n  if (!this->teapot_obj.Draw(projection, modelview_cam, modelview, shader_))\n    return false;\n  ```\n\n  In `TakeDown` function\n\n  ```cpp\n  this->cubehandle_obj.TakeDown();\n  this->teapot_obj.TakeDown();\n  ```\n\n  ![cubehandle](bmv/cubehandle_teapot.png)\n\n* Some default shaders are available in the folder `Shaders`.\n* Texture mapping is under development.\n\n---\n\n##### Acknowledgements\n\n* [Hammad Mazhar] both for helping me to understand the basics of computer graphics and for providing his camera class, the basic functionalities of which are used in this project.\n* [Syoyo Fujita] for his obj file loader, which I got through Hammad.\n* [Pradeep Garigipati] for providing sample obj files.\n* [Andrew Seidl]\n\n[Pradeep Garigipati]: https://pradeepgarigipati.com/\n[Hammad Mazhar]: https://github.com/hmazhar\n[Syoyo Fujita]: https://github.com/syoyo\n[Andrew Seidl]: https://github.com/andrewseidl"},"render":true},{"label":"blog","value":"[Blog](blog/blog-1/blog-1-1)","webPage":{"slug":"blog/blog-1/blog-1-1","detail":"My project for the course [CS838](http://pages.cs.wisc.edu/~sifakis/courses/cs838-f12/) (_Advanced Modeling and Simulation_) taught by [Prof. Eftychios Sifakis] in the Fall of 2012. Currently, here are some of the implementations in the source code\n\n* 3D implementation of Gradient augmented level set method ([arXiv version](https://arxiv.org/abs/0905.3409)) with tri-cubic Hermite interpolating polynomials.\n* Semi-Lagrangian implementation of pde’s for constant and linear extrapolations of scalar field across interface, originally proposed in \"_A partial differential equation approach to multidimensional extrapolation_, J. Comput. Phys. 193 (2004) 349-355\".\n* Implemented in the framework of [PhysBAM].\n* Results can be rendered using [Mitsuba].\n\nSource code: [12/2012, @[github](https://github.com/acrlakshman/crystal_growth_level_set_method)]; [Report](crystal-growth/report.pdf \"file\")\n\n---\n\n##### Some rendered results (using Mitsuba)\n\n| | |\n|-|-|\n|![crystal growth initial](crystal-growth/crystal_growth_initial.png)|![crystal growth final](crystal_growth_t.png)|\n\n---\n\n[crystal-growth-video](https://youtu.be/KuVfyDwx2qo \"show_video\")\n\n*[Crystal growth simulation](https://youtu.be/KuVfyDwx2qo) from [Lakshman Anumolu](https://www.youtube.com/channel/UC-kESKbz8Vw4RgoQiEh_LLg) on YouTube*\n\nScenes are rendered using [Mitsuba] v0.4.5. Scene file along with the scene background can be obtained from [here](crystal-growth/renderscene.zip \"file\"). Please note the following regarding the files in the downloaded zip file.\n* `scene.xml`: scene file that takes obj file as an input argument.\n* `movie.sh`: script that renders multiple scenes and converts exr images to png files and finally makes a movie using ffmpeg.\n* I believe these files will be helpful for a beginner in understanding how to use Mitsuba in their projects. They are pretty much self-explanatory.\n\nNote: `mtsutil` that comes with mitsuba can also be used instead of some of the above scripts (e.g. to get png files).\n\n[Prof. Eftychios Sifakis]: http://pages.cs.wisc.edu/~sifakis/\n[PhysBAM]: http://physbam.stanford.edu/\n[Mitsuba]: http://www.mitsuba-renderer.org/"},"render":false}],"slugMap":{"projects":{"profileio":{"position":0},"photorealistic-computational-fluid-dynamics":{"position":1},"basic-model-viewer":{"position":3},"crystal-growth":{"position":4},"smoke-simulation-openfoam":{"position":5},"cs559-f13":{"position":6},"initial-apps":{"position":7}},"custom":{"custom/custom-page-1":{"position":2},"blog/blog-1/blog-1-1":{"position":3}}}}